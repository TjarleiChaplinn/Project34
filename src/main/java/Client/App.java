/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Client;


import Client.arduinoConnection.ArduinoConnection;
import Client.arduinoConnection.BonDataTransfer;
import Client.arduinoConnection.KeypadDataTransfer;
import Client.arduinoConnection.RFIDDataTransfer;
import Client.lib.ApiConnector;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.stage.Stage;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Scanner;
import java.util.concurrent.TimeUnit;

public class App extends Application {

    public File file = new File("./src/main/resources/data.txt");
    public Scanner scanner;

    static ArduinoConnection connection = new ArduinoConnection();
    static BonDataTransfer bon = new BonDataTransfer(connection, "658", "Wijnhaven 107", "Rotterdam", false);
    static KeypadDataTransfer keypad = new KeypadDataTransfer(connection, false);
    public static RFIDDataTransfer rfid = new RFIDDataTransfer(connection, false);

    static public int totaalbedrag = 0;
    static public String balance = "0";
    public static ApiConnector apiConnector;
    static public int aantalVijf = 0;
    static public int aantalTien = 0;
    static public int aantalVijftig = 0;
    static public int nvijf = 0;
    static public int ntien = 0;
    static public int nvijftig = 0;
    static public String warning = "error";

    public static String scene = "";
    public static Stage primaryStage = null;
    public static loginController loginController = null;
    public static mainController mainController = null;
    public static endController endController = null;
    public static biljetController biljetController = null;
    public static warningController warningController = null;
    public static idleController idleController = null;
    public static waitController waitController = null;
    public static saldoController saldoController = null;

    public static void gotoMainScene() {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                App.setNul();
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/main.fxml"));
                Parent signupParent = null;
                try {
                    signupParent = loader.load();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                App.mainController = (mainController) loader.getController();

                Scene signupScene = new Scene(signupParent);
                App.primaryStage.setScene(signupScene);
                App.primaryStage.show();
            }
        });
    }

    public static void gotoEndScene() {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/end.fxml"));
                Parent signupParent = null;
                try {
                    signupParent = loader.load();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                App.endController = (endController) loader.getController();

                Scene signupScene = new Scene(signupParent);
                App.primaryStage.setScene(signupScene);
                App.primaryStage.show();
            }
        });
    }

    public static void gotoWarningScene(String warningText) {
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                App.warning = warningText;
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/warning.fxml"));
                Parent signupParent = null;
                try {
                    signupParent = loader.load();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                App.warningController = (warningController) loader.getController();

                Scene signupScene = new Scene(signupParent);
                App.primaryStage.setScene(signupScene);
                App.primaryStage.show();
            }
        });
    }

    public static void gotoIdle() {
        App.setNul();
        Platform.runLater(new Runnable() {
            @Override
            public void run() {
                FXMLLoader loader = new FXMLLoader(getClass().getResource("/idle.fxml"));
                Parent signupParent = null;
                try {
                    signupParent = loader.load();
                } catch (IOException e) {
                    e.printStackTrace();
                }

                App.idleController = (idleController) loader.getController();

                Scene signupScene = new Scene(signupParent);
                App.primaryStage.setScene(signupScene);
                App.primaryStage.show();
            }
        });
    }

    public void start(Stage primaryStage) throws Exception {

        this.primaryStage = primaryStage;
        try {
            connection.ports.openPort();
            bon.setName("Bon Thread");
            keypad.setName("Keypad Thread");
            rfid.setName("RFID Thread");
            bon.start();
            keypad.start();
            rfid.start();
            scanner = new Scanner(file);
        } catch (NullPointerException | FileNotFoundException e) {
            System.out.println("Ports couldn't be opened.");
            System.exit(0);
        }

        TimeUnit.SECONDS.sleep(3);

        this.primaryStage.setOnCloseRequest(e -> {
            Platform.exit();
            bon.killThread();
            keypad.killThread();
            rfid.killThread();
            System.exit(0);
        });


        aantalVijf = Integer.parseInt(scanner.nextLine());
        aantalTien = Integer.parseInt(scanner.nextLine());
        aantalVijftig = Integer.parseInt(scanner.nextLine());

        Parent root = FXMLLoader.load(getClass().getResource("/idle.fxml"));

        this.primaryStage.setTitle("ATM");
        this.primaryStage.setScene(new Scene(root));
        this.primaryStage.setAlwaysOnTop(true);
        this.primaryStage.setMaximized(true);
        this.primaryStage.show();
    }

    public static void main(String[] args) {
        launch();
    }

    static public void setNul() {
        totaalbedrag = 0;
    }
}

